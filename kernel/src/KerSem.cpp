/*
 * KernelSem.cpp
 *
 *  Created on: Jul 3, 2015
 *      Author: OS1
 */
#include "KerSem.h"



Niz<KernelSem>* KernelSem::Semaphores = new Niz<KernelSem>();

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

KernelSem::KernelSem(int init)
{
	val = init;
	SemBlocked = new BlockedQueue();
}

///////////////////////////////////////////////////////////////////////////////////////////

KernelSem::~KernelSem()
{
	erase();		//metoda koja oslobadja sve blokirane niti
}


/////////////////////////////////////////////////////////////////////////////////////////

void KernelSem::erase()
{
	PCB *temp = SemBlocked->get();
	while(temp!=0)
	{
		Scheduler::put(temp);
		temp = SemBlocked->get();
	}
}


////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////STATICKE METODE KOJE KORISTE SISTEMSKI POZIVI///////////////////////

void KernelSem::CreateSem(SemCraTransp *tra)
{
	//pozivanje konstruktora KernelSem i dodeljivanja id-a objektu Semaphore
	tra->sem->myImpl = Semaphores->add(new KernelSem(tra->init));
}


//////////////////////////////////////////////////////////////////////////////////////////


void KernelSem::WaitSem(ID myID)
{
	KernelSem *temp = KernelSem::Semaphores->niz[myID];
	if(--temp->val<0)
	{
		PCB::running->state = PCB::Blocked;
		temp->SemBlocked->put((PCB*)PCB::running);
		//Kernel::Dispatch();
	}
}


/////////////////////////////////////////////////////////////////////////////////////////


void KernelSem::SignalSem(int myID)
{
	KernelSem *temp = KernelSem::Semaphores->niz[myID];
	if(temp->val++<0){
	PCB *tmp;
	if((tmp = temp->SemBlocked->get())!=0) Scheduler::put(tmp);
	}
}


/////////////////////////////////////////////////////////////////////////////////////////


void KernelSem::GetValue(SemVal *s)
{
	s->val = KernelSem::Semaphores->niz[s->id]->val;
}

/////////////////////////////////////////////////////////////////////////////////////////


void KernelSem::DestroySem(int myID)
{
	delete Semaphores->niz[myID];
	KernelSem::Semaphores->remove(myID);
}


///////////////////////////////////////////END///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


